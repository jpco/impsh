#!/bin/tinsh

###
A safer rm command: Creates an indexed .trash directory in the caller's 
home folder and moves the rm'd items there, which can then be unrm'd
later.

Written by Jack Conger, 2016

TODO:
 - populate arg vars -- _n, _*, _1, etc.
 - test regex ~, !~
 - 'read' builtin
 - whatever analog for ${ftorm%?} we want
 - redirection! also like... blocks and making flow control actually work and w/e
###

# Utility function

let do_confirm = fn confmsg {
    echo -n "(confmsg) \(y/N\): "
    let conf = (read)
    if (conf) ~'^[yY]', echo 'y'
}

# ARGUMENT PARSING

if (_n) == 0 {
    echo "rmpp: missing operand."
    echo "Try 'rm --help' for more information."
    exit 1
} else if (_1) == "--help" || (_1) == "-h" {
    echo "Usage: rm [OPTION]... FILE..."
	echo "Rmpp--Safe rm: Does not unlink the file\(s\): rather, moves them to the user's"
	echo "~/.trash/ folder. See unrm and emptytrash for details on what you can"
	echo "do once the files are there."
	echo ""
	echo "OPTIONS:"
	echo "-o			Original: Use original /bin/rm, with all its associated"
	echo "			risk. Must be the first tag; all tags after the -o tag"
	echo "			will be processed by /bin/rm."
	echo "-r, -R			Recursive, 'remove' directories and their contents"
	echo "			recursively."
	echo "-i, -I			Interactive, prompt before each removal."
	echo "--ignore-blacklist	Ignores the global- and user-blacklists. This is"
	echo "			dangerous."
	echo ""
	echo "That's it. No more options at this time. Created by Jack Conger 2014."
	exit 0
}

if (_1) ~ '^-o' {
    let tags = x
    if ! (do_confirm 'This is unsafe. Continue?'): exit 0

    if (_1) == '-o' {
        if (_n) == 1 {
            set tags = ''
        } else {
            set tags = (echo (_*) | sed 's/[^ ]* //')
        }
    } else {
        set tags = (echo (_*) | sed 's/^..//')
    }

    /bin/rm (tags)
    exit 0
}

for arg in (_*) {
    if (arg) ~ '^-' {
        if (arg) == '--ignore-blacklist' {
            set -g ignoreblacklist = 1
            continue
        }
        if (arg) ~ '[rR]' {
            set -g recurse = 1
        }
        if (arg) ~ '[iI]' {
            set -g interact = 1
        }
        if (arg) ~ '[-]' {
            set -g ll = '--'
        }
    }
}

# THE "MEAT", IF YOU WILL

let wdir = (pwd)

# Create the trash if it doesn't exist
if ! -d ~/.trash {
    mkdir ~/.trash
    chmod 300 ~/.trash
    touch ~/.trash/trashregister
}

for ftorm in (_*) {
    # Existence check
    if ! -e (ftorm) && (ftorm) !~ ^- {
        echo "File '(ftorm)' not found."}
        continue
    }

    # Interactivity check
    if (interact) && ! (do_confirm "Do you want to delete the file '(ftorm)'?") {
        echo "Skipping file (ftorm)..."
        continue
    }

    # Recursive check
    if -d (ftorm) && ! (recurse) {
        echo "Skipping directory '(ftorm)'..."
        continue
    }

    # Filename cleanup
    cd (dirname (ll) (ftorm))
    let fullpath = (pwd)
    let justfname = (basename (ftorm))
    if (ftorm) ~ /$ {
        set ftorm = (ftorm%?) # strip last char from ftorm
        set justfname = (basename (ftorm))
    }
    cd (wdir)

    # Blacklist checks
    if (grep -x (fullpath)/(justfname) /etc/rmpp.conf) {
        if ! (ignoreblacklist) || ! (do_confirm "Are you sure you want to delete the blacklisted file '(ftorm)'?") {
            echo "Skipping globally blacklisted file '(ftorm)'..."
            continue
        }
    } else if (grep -x (fullpath)/(justfname) ~/.config/rmpp.conf -2> /dev/null) {
        if ! (ignoreblacklist) || ! (do_confirm "Are you sure you want to delete the blacklisted file '(ftorm)'?") {
            echo "Skipping user-blacklisted file '(ftorm)'..."
            continue
        }
    }

    # Do the actual thing
    let newfname = "~(justfname)~(date +%s)"
    mv (ll) (ftorm) ~/.trash/(newfname)
    echo -e "(fullpath)/(justfname)/(newfname)" ->+ ~/.trash/trashregister
}
